{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\bduho\\\\Desktop\\\\Product Model\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\bduho\\\\Desktop\\\\Product Model\",\"filename\":\"C:\\\\Users\\\\bduho\\\\Desktop\\\\Product Model\\\\Server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\bduho\\\\Desktop\\\\Product Model\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.26.9:development":{"value":{"code":"import express from 'express';\nimport mongoose from 'mongoose';\nimport dotenv from \"dotenv\";\nimport mainRouter from './routes/indexRouting.js';\nimport bodyParser from 'body-parser';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\ndotenv.config();\n\n// Get environment variables\nconst db_user = process.env.DB_USER;\nconst db_name = process.env.DB_NAME;\nconst db_pass = process.env.DB_PASS;\nconst PORT = process.env.PORT || 5000;\nconst app = express();\n\n// Create uploads directory if it doesn't exist\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst uploadDir = path.join(__dirname, 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, {\n    recursive: true\n  });\n}\n\n// Middleware\napp.use(bodyParser.json());\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// Routes\napp.use('/', mainRouter);\n\n// MongoDB connection\nconst dbUri = `mongodb+srv://${db_user}:${encodeURIComponent(db_pass)}@cluster0.qfmve.mongodb.net/${db_name}?retryWrites=true&w=majority&appName=Cluster0`;\nmongoose.set(\"strictQuery\", false);\nmongoose.connect(dbUri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  serverSelectionTimeoutMS: 5000 // Timeout after 5s instead of 30s\n}).then(() => {\n  console.log(\"Connected to MongoDB Atlas successfully\");\n  app.listen(PORT, () => {\n    console.log(`Server is running on port http://localhost:${PORT}`);\n  });\n}).catch(err => {\n  console.error(\"MongoDB connection error:\", err);\n  process.exit(1);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwibW9uZ29vc2UiLCJkb3RlbnYiLCJtYWluUm91dGVyIiwiYm9keVBhcnNlciIsInBhdGgiLCJmcyIsImZpbGVVUkxUb1BhdGgiLCJjb25maWciLCJkYl91c2VyIiwicHJvY2VzcyIsImVudiIsIkRCX1VTRVIiLCJkYl9uYW1lIiwiREJfTkFNRSIsImRiX3Bhc3MiLCJEQl9QQVNTIiwiUE9SVCIsImFwcCIsIl9fZmlsZW5hbWUiLCJpbXBvcnQiLCJtZXRhIiwidXJsIiwiX19kaXJuYW1lIiwiZGlybmFtZSIsInVwbG9hZERpciIsImpvaW4iLCJleGlzdHNTeW5jIiwibWtkaXJTeW5jIiwicmVjdXJzaXZlIiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImRiVXJpIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2V0IiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsInNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwibGlzdGVuIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsImV4aXQiXSwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xcYmR1aG9cXERlc2t0b3BcXFByb2R1Y3QgTW9kZWxcXCIsInNvdXJjZXMiOlsiU2VydmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5pbXBvcnQgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcclxuaW1wb3J0IG1haW5Sb3V0ZXIgZnJvbSAnLi9yb3V0ZXMvaW5kZXhSb3V0aW5nLmpzJztcclxuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XHJcblxyXG5kb3RlbnYuY29uZmlnKCk7XHJcblxyXG4vLyBHZXQgZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcbmNvbnN0IGRiX3VzZXIgPSBwcm9jZXNzLmVudi5EQl9VU0VSO1xyXG5jb25zdCBkYl9uYW1lID0gcHJvY2Vzcy5lbnYuREJfTkFNRTtcclxuY29uc3QgZGJfcGFzcyA9IHByb2Nlc3MuZW52LkRCX1BBU1M7XHJcbmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDUwMDA7XHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG4vLyBDcmVhdGUgdXBsb2FkcyBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdFxyXG5jb25zdCBfX2ZpbGVuYW1lID0gZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpO1xyXG5jb25zdCBfX2Rpcm5hbWUgPSBwYXRoLmRpcm5hbWUoX19maWxlbmFtZSk7XHJcbmNvbnN0IHVwbG9hZERpciA9IHBhdGguam9pbihfX2Rpcm5hbWUsICd1cGxvYWRzJyk7XHJcblxyXG5pZiAoIWZzLmV4aXN0c1N5bmModXBsb2FkRGlyKSkge1xyXG4gIGZzLm1rZGlyU3luYyh1cGxvYWREaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG59XHJcblxyXG4vLyBNaWRkbGV3YXJlXHJcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xyXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcclxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XHJcblxyXG4vLyBSb3V0ZXNcclxuYXBwLnVzZSgnLycsIG1haW5Sb3V0ZXIpO1xyXG5cclxuLy8gTW9uZ29EQiBjb25uZWN0aW9uXHJcbmNvbnN0IGRiVXJpID0gYG1vbmdvZGIrc3J2Oi8vJHtkYl91c2VyfToke2VuY29kZVVSSUNvbXBvbmVudChkYl9wYXNzKX1AY2x1c3RlcjAucWZtdmUubW9uZ29kYi5uZXQvJHtkYl9uYW1lfT9yZXRyeVdyaXRlcz10cnVlJnc9bWFqb3JpdHkmYXBwTmFtZT1DbHVzdGVyMGA7XHJcblxyXG5tb25nb29zZS5zZXQoXCJzdHJpY3RRdWVyeVwiLCBmYWxzZSk7XHJcbm1vbmdvb3NlXHJcbiAgLmNvbm5lY3QoZGJVcmksIHtcclxuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcclxuICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcclxuICAgIHNlcnZlclNlbGVjdGlvblRpbWVvdXRNUzogNTAwMCAvLyBUaW1lb3V0IGFmdGVyIDVzIGluc3RlYWQgb2YgMzBzXHJcbiAgfSlcclxuICAudGhlbigoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3RlZCB0byBNb25nb0RCIEF0bGFzIHN1Y2Nlc3NmdWxseVwiKTtcclxuICAgIGFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhgU2VydmVyIGlzIHJ1bm5pbmcgb24gcG9ydCBodHRwOi8vbG9jYWxob3N0OiR7UE9SVH1gKTtcclxuICAgIH0pO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiTW9uZ29EQiBjb25uZWN0aW9uIGVycm9yOlwiLCBlcnIpO1xyXG4gICAgcHJvY2Vzcy5leGl0KDEpO1xyXG4gIH0pOyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsT0FBTyxNQUFNLFNBQVM7QUFDN0IsT0FBT0MsUUFBUSxNQUFNLFVBQVU7QUFDL0IsT0FBT0MsTUFBTSxNQUFNLFFBQVE7QUFDM0IsT0FBT0MsVUFBVSxNQUFNLDBCQUEwQjtBQUNqRCxPQUFPQyxVQUFVLE1BQU0sYUFBYTtBQUNwQyxPQUFPQyxJQUFJLE1BQU0sTUFBTTtBQUN2QixPQUFPQyxFQUFFLE1BQU0sSUFBSTtBQUNuQixTQUFTQyxhQUFhLFFBQVEsS0FBSztBQUVuQ0wsTUFBTSxDQUFDTSxNQUFNLENBQUMsQ0FBQzs7QUFFZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLE9BQU87QUFDbkMsTUFBTUMsT0FBTyxHQUFHSCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0csT0FBTztBQUNuQyxNQUFNQyxPQUFPLEdBQUdMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSyxPQUFPO0FBQ25DLE1BQU1DLElBQUksR0FBR1AsT0FBTyxDQUFDQyxHQUFHLENBQUNNLElBQUksSUFBSSxJQUFJO0FBRXJDLE1BQU1DLEdBQUcsR0FBR2xCLE9BQU8sQ0FBQyxDQUFDOztBQUVyQjtBQUNBLE1BQU1tQixVQUFVLEdBQUdaLGFBQWEsQ0FBQ2EsTUFBTSxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQztBQUNqRCxNQUFNQyxTQUFTLEdBQUdsQixJQUFJLENBQUNtQixPQUFPLENBQUNMLFVBQVUsQ0FBQztBQUMxQyxNQUFNTSxTQUFTLEdBQUdwQixJQUFJLENBQUNxQixJQUFJLENBQUNILFNBQVMsRUFBRSxTQUFTLENBQUM7QUFFakQsSUFBSSxDQUFDakIsRUFBRSxDQUFDcUIsVUFBVSxDQUFDRixTQUFTLENBQUMsRUFBRTtFQUM3Qm5CLEVBQUUsQ0FBQ3NCLFNBQVMsQ0FBQ0gsU0FBUyxFQUFFO0lBQUVJLFNBQVMsRUFBRTtFQUFLLENBQUMsQ0FBQztBQUM5Qzs7QUFFQTtBQUNBWCxHQUFHLENBQUNZLEdBQUcsQ0FBQzFCLFVBQVUsQ0FBQzJCLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDMUJiLEdBQUcsQ0FBQ1ksR0FBRyxDQUFDOUIsT0FBTyxDQUFDK0IsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN2QmIsR0FBRyxDQUFDWSxHQUFHLENBQUM5QixPQUFPLENBQUNnQyxVQUFVLENBQUM7RUFBRUMsUUFBUSxFQUFFO0FBQUssQ0FBQyxDQUFDLENBQUM7O0FBRS9DO0FBQ0FmLEdBQUcsQ0FBQ1ksR0FBRyxDQUFDLEdBQUcsRUFBRTNCLFVBQVUsQ0FBQzs7QUFFeEI7QUFDQSxNQUFNK0IsS0FBSyxHQUFHLGlCQUFpQnpCLE9BQU8sSUFBSTBCLGtCQUFrQixDQUFDcEIsT0FBTyxDQUFDLCtCQUErQkYsT0FBTywrQ0FBK0M7QUFFMUpaLFFBQVEsQ0FBQ21DLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDO0FBQ2xDbkMsUUFBUSxDQUNMb0MsT0FBTyxDQUFDSCxLQUFLLEVBQUU7RUFDZEksZUFBZSxFQUFFLElBQUk7RUFDckJDLGtCQUFrQixFQUFFLElBQUk7RUFDeEJDLHdCQUF3QixFQUFFLElBQUksQ0FBQztBQUNqQyxDQUFDLENBQUMsQ0FDREMsSUFBSSxDQUFDLE1BQU07RUFDVkMsT0FBTyxDQUFDQyxHQUFHLENBQUMseUNBQXlDLENBQUM7RUFDdER6QixHQUFHLENBQUMwQixNQUFNLENBQUMzQixJQUFJLEVBQUUsTUFBTTtJQUNyQnlCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDhDQUE4QzFCLElBQUksRUFBRSxDQUFDO0VBQ25FLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUNENEIsS0FBSyxDQUFDQyxHQUFHLElBQUk7RUFDWkosT0FBTyxDQUFDSyxLQUFLLENBQUMsMkJBQTJCLEVBQUVELEdBQUcsQ0FBQztFQUMvQ3BDLE9BQU8sQ0FBQ3NDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119","map":{"version":3,"names":["express","mongoose","dotenv","mainRouter","bodyParser","path","fs","fileURLToPath","config","db_user","process","env","DB_USER","db_name","DB_NAME","db_pass","DB_PASS","PORT","app","__filename","import","meta","url","__dirname","dirname","uploadDir","join","existsSync","mkdirSync","recursive","use","json","urlencoded","extended","dbUri","encodeURIComponent","set","connect","useNewUrlParser","useUnifiedTopology","serverSelectionTimeoutMS","then","console","log","listen","catch","err","error","exit"],"sourceRoot":"C:\\Users\\bduho\\Desktop\\Product Model\\","sources":["Server.js"],"sourcesContent":["import express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport dotenv from \"dotenv\";\r\nimport mainRouter from './routes/indexRouting.js';\r\nimport bodyParser from 'body-parser';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport { fileURLToPath } from 'url';\r\n\r\ndotenv.config();\r\n\r\n// Get environment variables\r\nconst db_user = process.env.DB_USER;\r\nconst db_name = process.env.DB_NAME;\r\nconst db_pass = process.env.DB_PASS;\r\nconst PORT = process.env.PORT || 5000;\r\n\r\nconst app = express();\r\n\r\n// Create uploads directory if it doesn't exist\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst uploadDir = path.join(__dirname, 'uploads');\r\n\r\nif (!fs.existsSync(uploadDir)) {\r\n  fs.mkdirSync(uploadDir, { recursive: true });\r\n}\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Routes\r\napp.use('/', mainRouter);\r\n\r\n// MongoDB connection\r\nconst dbUri = `mongodb+srv://${db_user}:${encodeURIComponent(db_pass)}@cluster0.qfmve.mongodb.net/${db_name}?retryWrites=true&w=majority&appName=Cluster0`;\r\n\r\nmongoose.set(\"strictQuery\", false);\r\nmongoose\r\n  .connect(dbUri, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    serverSelectionTimeoutMS: 5000 // Timeout after 5s instead of 30s\r\n  })\r\n  .then(() => {\r\n    console.log(\"Connected to MongoDB Atlas successfully\");\r\n    app.listen(PORT, () => {\r\n      console.log(`Server is running on port http://localhost:${PORT}`);\r\n    });\r\n  })\r\n  .catch(err => {\r\n    console.error(\"MongoDB connection error:\", err);\r\n    process.exit(1);\r\n  });"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,EAAE,MAAM,IAAI;AACnB,SAASC,aAAa,QAAQ,KAAK;AAEnCL,MAAM,CAACM,MAAM,CAAC,CAAC;;AAEf;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,OAAO;AACnC,MAAMC,OAAO,GAAGH,OAAO,CAACC,GAAG,CAACG,OAAO;AACnC,MAAMC,OAAO,GAAGL,OAAO,CAACC,GAAG,CAACK,OAAO;AACnC,MAAMC,IAAI,GAAGP,OAAO,CAACC,GAAG,CAACM,IAAI,IAAI,IAAI;AAErC,MAAMC,GAAG,GAAGlB,OAAO,CAAC,CAAC;;AAErB;AACA,MAAMmB,UAAU,GAAGZ,aAAa,CAACa,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AACjD,MAAMC,SAAS,GAAGlB,IAAI,CAACmB,OAAO,CAACL,UAAU,CAAC;AAC1C,MAAMM,SAAS,GAAGpB,IAAI,CAACqB,IAAI,CAACH,SAAS,EAAE,SAAS,CAAC;AAEjD,IAAI,CAACjB,EAAE,CAACqB,UAAU,CAACF,SAAS,CAAC,EAAE;EAC7BnB,EAAE,CAACsB,SAAS,CAACH,SAAS,EAAE;IAAEI,SAAS,EAAE;EAAK,CAAC,CAAC;AAC9C;;AAEA;AACAX,GAAG,CAACY,GAAG,CAAC1B,UAAU,CAAC2B,IAAI,CAAC,CAAC,CAAC;AAC1Bb,GAAG,CAACY,GAAG,CAAC9B,OAAO,CAAC+B,IAAI,CAAC,CAAC,CAAC;AACvBb,GAAG,CAACY,GAAG,CAAC9B,OAAO,CAACgC,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;;AAE/C;AACAf,GAAG,CAACY,GAAG,CAAC,GAAG,EAAE3B,UAAU,CAAC;;AAExB;AACA,MAAM+B,KAAK,GAAG,iBAAiBzB,OAAO,IAAI0B,kBAAkB,CAACpB,OAAO,CAAC,+BAA+BF,OAAO,+CAA+C;AAE1JZ,QAAQ,CAACmC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC;AAClCnC,QAAQ,CACLoC,OAAO,CAACH,KAAK,EAAE;EACdI,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE,IAAI;EACxBC,wBAAwB,EAAE,IAAI,CAAC;AACjC,CAAC,CAAC,CACDC,IAAI,CAAC,MAAM;EACVC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;EACtDzB,GAAG,CAAC0B,MAAM,CAAC3B,IAAI,EAAE,MAAM;IACrByB,OAAO,CAACC,GAAG,CAAC,8CAA8C1B,IAAI,EAAE,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC,CACD4B,KAAK,CAACC,GAAG,IAAI;EACZJ,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC;EAC/CpC,OAAO,CAACsC,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC","ignoreList":[]}},"mtime":1740406581147}}